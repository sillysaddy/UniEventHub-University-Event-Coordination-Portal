import mongoose from "mongoose";
import bcrypt from "bcryptjs";

/**
 * User Schema for MongoDB using Mongoose.
 * 
 * @typedef {Object} User
 * @property {string} name - The name of the user. It is required and trimmed.
 * @property {string} email - The email of the user. It is required, unique, converted to lowercase, and trimmed.
 * @property {string} password - The password of the user. It is required and must be at least 6 characters long.
 * @property {string} userId - The unique identifier for the user. It is required and unique.
 * @property {string} role - The role of the user. It can be one of "club_representative", "oca_staff", "advisor", or "system_admin". The default is "club_representative".
 * @property {Date} createdAt - The date when the user was created. Automatically generated by Mongoose.
 * @property {Date} updatedAt - The date when the user was last updated. Automatically generated by Mongoose.
 */
const userSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, "Name is required"],
      trim: true, // Remove whitespace
    },
    email: {
      type: String,
      required: [true, "Email is required"],
      unique: true, // Ensure Email is unique 
      lowercase: true, // Convert email to lowercase
      trim: true,
    },
    password: {
      type: String,
      required: [true, "Password is required"], // Ensure password is required
      minlength: [6, "Password must be at least 6 characters"], // Ensure password is at least 6 characters 
    },
    userId: {
      type: String,
      required: [true, "User ID is required"],
      unique: true, 
    },
    role: {
      type: String,
      enum: ["club_representative", "oca_staff", "advisor", "system_admin"],
      default: "club_representative",
      required: true,
    },
  },
  {
    timestamps: true,
  }
);

// Hash password before saving
userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 12);
  next();
});

const User = mongoose.model("User", userSchema); // Create a model from the schema
export default User; // Export the model